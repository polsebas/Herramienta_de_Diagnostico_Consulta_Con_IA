#!/usr/bin/env python3
"""
Ejemplo de uso del Agente Analizador
Este script muestra c√≥mo usar el agente para analizar un proyecto espec√≠fico
"""

import os
import sys
from pathlib import Path
from app.agente_analizador import AgenteAnalizador, generate_report

def analizar_proyecto(project_path: str, output_file: str | None = None, use_ai: bool = False):
    """
    Analiza un proyecto espec√≠fico y genera un informe
    
    Args:
        project_path: Ruta al proyecto a analizar
        output_file: Nombre del archivo de salida (opcional)
        use_ai: Si usar an√°lisis con IA (requiere OpenAI API key)
    """
    print(f"üîç Analizando proyecto: {project_path}")
    
    # Verificar que el proyecto existe
    if not Path(project_path).exists():
        print(f"‚ùå Error: El proyecto {project_path} no existe")
        return None, None
    
    # Configurar OpenAI si se solicita
    api_key = None
    if use_ai:
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print("‚ö†Ô∏è  OpenAI API key no configurada. Usando an√°lisis b√°sico.")
            print("   Para usar IA, configura: export OPENAI_API_KEY='tu-api-key'")
        else:
            print("ü§ñ Usando an√°lisis con IA")
    
    # Crear agente
    print("üîÑ Inicializando agente analizador...")
    agente = AgenteAnalizador(project_path, api_key)
    
    # Ejecutar an√°lisis
    print("üîÑ Ejecutando an√°lisis completo...")
    resultados = agente.run_analysis()
    
    # Generar informe
    print("üìù Generando informe...")
    informe = generate_report(resultados)
    
    # Guardar informe
    if not output_file:
        project_name = Path(project_path).name
        output_file = f"informe_{project_name}.md"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(informe)
    
    print(f"‚úÖ Informe guardado en: {output_file}")
    print(f"üìÑ Tama√±o: {len(informe)} caracteres")
    
    return resultados, informe

def mostrar_resumen(resultados):
    """Muestra un resumen de los resultados del an√°lisis"""
    print("\nüìä RESUMEN DEL AN√ÅLISIS")
    print("=" * 50)
    
    # An√°lisis funcional
    funcional = resultados.get('funcional', {})
    print("\nüìã An√°lisis Funcional:")
    print(f"   ‚Ä¢ Documentaci√≥n analizada: {'‚úÖ' if 'documentacion_analisis' in funcional else '‚ùå'}")
    print(f"   ‚Ä¢ Interfaces detectadas: {'‚úÖ' if 'interfaces' in funcional else '‚ùå'}")
    print(f"   ‚Ä¢ Entrevistas simuladas: {'‚úÖ' if 'entrevistas' in funcional else '‚ùå'}")
    print(f"   ‚Ä¢ Diagramas de flujo: {'‚úÖ' if 'diagramas_flujo' in funcional else '‚ùå'}")
    
    # An√°lisis t√©cnico
    tecnico = resultados.get('tecnico', {})
    print("\nüîß An√°lisis T√©cnico:")
    print(f"   ‚Ä¢ C√≥digo analizado: {'‚úÖ' if 'codigo' in tecnico else '‚ùå'}")
    print(f"   ‚Ä¢ Dependencias revisadas: {'‚úÖ' if 'dependencias' in tecnico else '‚ùå'}")
    print(f"   ‚Ä¢ Arquitectura evaluada: {'‚úÖ' if 'arquitectura' in tecnico else '‚ùå'}")
    print(f"   ‚Ä¢ Rendimiento simulado: {'‚úÖ' if 'rendimiento' in tecnico else '‚ùå'}")
    print(f"   ‚Ä¢ Oportunidades de IA: {'‚úÖ' if 'oportunidades_ia' in tecnico else '‚ùå'}")
    
    # Detalles espec√≠ficos
    if 'codigo' in tecnico:
        codigo = tecnico['codigo']
        print(f"\nüìà M√©tricas de C√≥digo:")
        print(f"   ‚Ä¢ Archivos analizados: {codigo.get('archivos_analizados', 0)}")
        print(f"   ‚Ä¢ Funciones totales: {codigo.get('metricas', {}).get('total_funciones', 0)}")
        print(f"   ‚Ä¢ Clases totales: {codigo.get('metricas', {}).get('total_clases', 0)}")
        print(f"   ‚Ä¢ Problemas detectados: {len(codigo.get('problemas_detectados', []))}")
    
    if 'arquitectura' in tecnico:
        arch = tecnico['arquitectura']
        print(f"\nüèóÔ∏è  Arquitectura:")
        print(f"   ‚Ä¢ Tipo estimado: {arch.get('tipo_estimado', 'Desconocido')}")
        print(f"   ‚Ä¢ Patrones detectados: {', '.join(arch.get('patrones_detectados', []))}")
        print(f"   ‚Ä¢ Componentes principales: {len(arch.get('componentes_principales', []))}")
    
    if 'oportunidades_ia' in tecnico:
        oportunidades = tecnico['oportunidades_ia']
        print(f"\nü§ñ Oportunidades de IA:")
        print(f"   ‚Ä¢ Oportunidades detectadas: {len(oportunidades)}")
        for i, op in enumerate(oportunidades[:5], 1):  # Mostrar las primeras 5
            print(f"     {i}. {op['oportunidad']}")
        if len(oportunidades) > 5:
            print(f"     ... y {len(oportunidades) - 5} m√°s")

def ejemplo_analisis_basico():
    """Ejemplo de an√°lisis b√°sico sin IA"""
    print("üéØ EJEMPLO: AN√ÅLISIS B√ÅSICO")
    print("=" * 50)
    
    # Analizar el proyecto actual
    project_path = "."
    
    resultados, informe = analizar_proyecto(project_path, "ejemplo_basico.md", use_ai=False)
    
    if resultados:
        mostrar_resumen(resultados)
    
    return resultados

def ejemplo_analisis_con_ia():
    """Ejemplo de an√°lisis con IA (si est√° disponible)"""
    print("\nü§ñ EJEMPLO: AN√ÅLISIS CON IA")
    print("=" * 50)
    
    # Verificar si hay API key
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ö†Ô∏è  OpenAI API key no configurada")
        print("   Para usar este ejemplo, configura:")
        print("   export OPENAI_API_KEY='tu-api-key-aqui'")
        return None
    
    # Analizar con IA
    project_path = "."
    resultados, informe = analizar_proyecto(project_path, "ejemplo_con_ia.md", use_ai=True)
    
    if resultados:
        mostrar_resumen(resultados)
        
        # Mostrar fragmento del an√°lisis con IA
        funcional = resultados.get('funcional', {})
        if 'documentacion_analisis' in funcional:
            print("\nüìñ AN√ÅLISIS DE DOCUMENTACI√ìN CON IA:")
            print("-" * 40)
            analisis = funcional['documentacion_analisis']
            if not analisis.startswith('Error'):
                lines = analisis.split('\n')[:5]
                for line in lines:
                    print(line)
                print("...")
    
    return resultados

def ejemplo_analisis_personalizado():
    """Ejemplo de an√°lisis personalizado"""
    print("\n‚öôÔ∏è  EJEMPLO: AN√ÅLISIS PERSONALIZADO")
    print("=" * 50)
    
    # Crear agente
    agente = AgenteAnalizador(".", os.getenv('OPENAI_API_KEY'))
    
    # Escanear proyecto
    print("üîÑ Escaneando estructura del proyecto...")
    agente.scan_project_structure()
    
    print(f"üìÅ Archivos encontrados:")
    print(f"   ‚Ä¢ Documentaci√≥n: {len(agente.documentation_files)}")
    print(f"   ‚Ä¢ C√≥digo: {len(agente.code_files)}")
    print(f"   ‚Ä¢ Configuraci√≥n: {len(agente.config_files)}")
    print(f"   ‚Ä¢ Otros: {len(agente.other_files)}")
    
    # An√°lisis funcional personalizado
    print("\nüîÑ Ejecutando an√°lisis funcional...")
    agente.analisis_funcional()
    
    # An√°lisis t√©cnico personalizado
    print("üîÑ Ejecutando an√°lisis t√©cnico...")
    agente.analisis_tecnico_profundo()
    
    # Mostrar algunos resultados espec√≠ficos
    tecnico = agente.analysis_results.get('tecnico', {})
    if 'codigo' in tecnico:
        codigo = tecnico['codigo']
        print(f"\nüìä Lenguajes detectados:")
        for lang, count in codigo.get('lenguajes', {}).items():
            print(f"   ‚Ä¢ {lang}: {count} archivos")
    
    if 'dependencias' in tecnico:
        deps = tecnico['dependencias']
        print(f"\nüì¶ Dependencias detectadas:")
        for dep in deps.get('dependencias_detectadas', [])[:5]:
            print(f"   ‚Ä¢ {dep.get('paquete', 'N/A')} v{dep.get('version', 'N/A')}")
    
    return agente.analysis_results

def main():
    """Funci√≥n principal del ejemplo"""
    print("üöÄ EJEMPLOS DE USO DEL AGENTE ANALIZADOR")
    print("=" * 60)
    
    try:
        # Ejemplo 1: An√°lisis b√°sico
        ejemplo_analisis_basico()
        
        # Ejemplo 2: An√°lisis con IA
        ejemplo_analisis_con_ia()
        
        # Ejemplo 3: An√°lisis personalizado
        ejemplo_analisis_personalizado()
        
        print("\n" + "=" * 60)
        print("‚úÖ EJEMPLOS COMPLETADOS")
        print("\nüìã Archivos generados:")
        print("   ‚Ä¢ ejemplo_basico.md - An√°lisis b√°sico")
        print("   ‚Ä¢ ejemplo_con_ia.md - An√°lisis con IA (si est√° disponible)")
        print("   ‚Ä¢ informe_analisis_.md - Informe del proyecto actual")
        
        print("\nüéØ Pr√≥ximos pasos:")
        print("   1. Revisar los informes generados")
        print("   2. Personalizar el an√°lisis seg√∫n necesidades")
        print("   3. Configurar OpenAI para an√°lisis con IA")
        
    except Exception as e:
        print(f"\n‚ùå Error en ejemplos: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 